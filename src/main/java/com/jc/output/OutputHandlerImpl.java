package com.jc.output;




import com.jc.bean.Format;
import org.apache.log4j.Logger;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OutputHandlerImpl implements OutputHandler {

    static final Logger logger = Logger.getLogger(OutputHandlerImpl.class);

    /*
    * since the combination array generated by calculator core may have some duplicated bundle,
    * in order to conveniently generate output string, multiple same bundle will be counted,
    * and stored in optimizedCombination which each keys is unique bundle, value is its quantity
    * */
    HashMap<Integer,Integer> optimizedCombination;

    StringBuilder outputStr;

    private int realTotal;

    public OutputHandlerImpl(){outputStr=new StringBuilder();}

    public void buildOutputStr(List<Integer> combination, Format format){
        optimizeCombinationArray(combination);
        StringBuilder itemOutput=new StringBuilder();
        BigDecimal amounts=new BigDecimal(0);
        HashMap<Integer,BigDecimal> bundlesSpecs=format.getBundles();

        for(Map.Entry<Integer,Integer> entry:optimizedCombination.entrySet()){

            itemOutput.append(" ").append(entry.getValue()).append(" x ").append(entry.getKey())
                    .append(" $").append(bundlesSpecs.get(entry.getKey()).multiply(new BigDecimal(entry.getValue()))).append("\n");

            amounts=amounts.add(bundlesSpecs.get(entry.getKey()).multiply(new BigDecimal(entry.getValue())));
        }

        outputStr.append(realTotal).append(" ").append(format.getCode()).append(" ")
                .append(amounts).append("\n").append(itemOutput);
    }


    public void outputResult(){
        logger.info(outputStr);
    }


    private void optimizeCombinationArray(List<Integer> combination){
        realTotal=0;
        optimizedCombination =new HashMap<>();
        for(Integer num:combination){
            if(optimizedCombination.containsKey(num)){
                optimizedCombination.put(num, optimizedCombination.get(num)+1);
            }else {
                optimizedCombination.put(num,1);
            }
            realTotal+=num;
        }
    }
}
